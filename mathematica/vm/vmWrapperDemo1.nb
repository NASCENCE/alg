(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     12251,        363]
NotebookOptionsPosition[     10742,        307]
NotebookOutlinePosition[     11110,        323]
CellTagsIndexPosition[     11067,        320]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Virtual Material", "Subsection",
 CellChangeTimes->{{3.622223258499835*^9, 3.622223268474772*^9}}],

Cell["\<\
This notebook shows how to use the virtual material through Nascence API. It \
is using the java wrapper that is suited to access the VM. \
\>", "Text",
 CellChangeTimes->{{3.622223269776669*^9, 3.6222233505325127`*^9}, {
  3.6222251142903957`*^9, 3.622225139933127*^9}, {3.6222259561014843`*^9, 
  3.622225979950082*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Needs", "[", "\"\<JLink`\>\"", "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.622223388454206*^9, 3.622223418428895*^9}, {
   3.6222235036574163`*^9, 3.622223514494547*^9}, 3.622223683895996*^9, 
   3.62222386177465*^9, {3.622225860224255*^9, 3.62222586238139*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Java wrapper wrapper :)", "Subsection",
 CellChangeTimes->{{3.622223323282317*^9, 3.622223326502578*^9}, {
  3.622223373984549*^9, 3.622223382879573*^9}, {3.6222259190165243`*^9, 
  3.622225923435885*^9}}],

Cell["\<\
The VM is expected to be running at the given machine and port. Path is the \
path to the compiled VM classes.\
\>", "Text",
 CellChangeTimes->{{3.622225957661233*^9, 3.6222259694189863`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"vmConnect", "[", 
   RowBox[{"host_", ",", "port_", ",", "path_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"vmJars", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"FileNames", "[", 
         RowBox[{"path", "<>", "\"\</dist/*\>\""}], "]"}], ",", 
        RowBox[{"FileNames", "[", 
         RowBox[{"path", "<>", "\"\</lib/*\>\""}], "]"}]}], "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"javaBin", "=", "\"\</usr/lib/jvm/java-6-sun/bin/java\>\""}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"ReinstallJava", "[", 
      RowBox[{"CommandLine", "=", "javaBin"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AddToClassPath", "/@", "vmJars"}], ";", "\[IndentingNewLine]", 
     RowBox[{"JavaNew", "[", 
      RowBox[{"\"\<nascence.vm.io.MathClient\>\"", ",", "host", ",", "port"}],
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.622225436476192*^9, 3.6222254607770357`*^9}, {
  3.622225510526217*^9, 3.622225554610209*^9}, {3.622225609976701*^9, 
  3.6222256177608433`*^9}, {3.622225706564769*^9, 3.62222572321535*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example usage", "Subsection",
 CellChangeTimes->{{3.6222259059899673`*^9, 3.622225938643578*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"vmHost", "=", "\"\<localhost\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"vmPort", "=", "9090"}], ";"}]}], "Input",
 CellChangeTimes->{{3.622223351849883*^9, 3.622223366928597*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"vmPath", "=", "\"\<git/NASCENCE/vm\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.622223531427229*^9, 3.622223579385215*^9}, {
  3.6222239159614677`*^9, 3.622223916124701*^9}, {3.6222258486475687`*^9, 
  3.622225854120181*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vmClient", "=", 
  RowBox[{"vmConnect", "[", 
   RowBox[{"vmHost", ",", "vmPort", ",", "vmPath"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.622223697725622*^9, 3.6222237762399263`*^9}, {
  3.6222239544023857`*^9, 3.622223956053886*^9}, {3.622225828136595*^9, 
  3.6222258440684443`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{"nascence", ".", "vm", ".", "io", ".", "MathClient"}], "]"}], 
   "\[RightGuillemet]"}],
  JLink`Objects`vm6`JavaObject21495552969539585]], "Output",
 CellChangeTimes->{
  3.622223778897605*^9, 3.622223864822826*^9, {3.6222239485794086`*^9, 
   3.622223956859046*^9}, 3.6222243104793797`*^9, 3.6222243575433407`*^9}]
}, Open  ]],

Cell[TextData[{
 "Check who we are talking to (this is also test if the board / VM works). VM \
outputs st. like ",
 StyleBox["Virtual Material - Elman Recurrent Neural Network",
  FontFamily->"Courier"],
 ":"
}], "Text",
 CellChangeTimes->{{3.62222439110567*^9, 3.622224396249093*^9}, {
  3.622224447022407*^9, 3.622224514914638*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vmClient", "@", 
  RowBox[{"getMotherboardID", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.622224359396329*^9, 3.6222243896789494`*^9}, {
  3.622224422824871*^9, 3.622224423033463*^9}}],

Cell[BoxData["\<\"Virtual Material - Elman Recurrent Neural Network\"\>"], \
"Output",
 CellChangeTimes->{{3.622224399074139*^9, 3.622224423607499*^9}, {
  3.622225795519724*^9, 3.622225804876567*^9}}]
}, Open  ]],

Cell["\<\
Try a simple experiment with a VM generated at random (8 inputs, 32 hidden \
nodes, 8 outputs, max weights of 5.0, 0.9 connection probability, no CW-RNN, \
no recurrency (feedforward MLP only)):\
\>", "Text",
 CellChangeTimes->{{3.622224525390386*^9, 3.622224542284236*^9}, {
  3.622224581047716*^9, 3.622224632564653*^9}}],

Cell[BoxData[
 RowBox[{"vmClient", "@", 
  RowBox[{"programmeVarElmanRandom", "[", 
   RowBox[{
   "8", ",", "32", ",", "8", ",", "5.0", ",", " ", "0.9", ",", " ", "False", 
    ",", " ", "False"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.622224521218917*^9, 3.622224522712212*^9}, {
  3.6222245667486687`*^9, 3.622224577700596*^9}, {3.622224624802903*^9, 
  3.622224650755525*^9}}],

Cell["\<\
Now test the material generating input data (list of input lists), let' s use \
the last (7 th pin - VM uses 0 - based indexing) pin as the VM output and \
evaluate the VM. The wrapper internally uses real numbers. One has to specify \
the amplitude, which is multiplied by the data in order to server the VM \
integer values via the nascence API. The output is, again, scaled by the \
amplitude value. Setting up amplitude to 255 will make values between 0 and 1 \
to have 255 distinct values. Here is the 10 input vectors of length 7.\
\>", "Text",
 CellChangeTimes->{{3.6222246591292963`*^9, 3.6222247729055357`*^9}, {
  3.622224813771373*^9, 3.622224900002913*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Round", "[", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "7"}], "}"}]}], "]"}]}], ",", "0.01"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.622224739620101*^9, 3.62222474657415*^9}, {
  3.6222248794111547`*^9, 3.622224958891797*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.16`", "0.8300000000000001`", "0.73`", "0.42`", "0.74`", "0.12`", 
      "0.21`"},
     {"0.74`", "0.9500000000000001`", "0.8`", "0.03`", "0.05`", "0.51`", 
      "0.91`"},
     {"0.27`", "0.8200000000000001`", "0.24`", "0.96`", "0.8`", "0.18`", 
      "0.63`"},
     {"0.15`", "0.61`", "0.86`", "0.5`", "0.37`", "0.1`", "0.05`"},
     {"0.11`", "0.23`", "0.2`", "0.12`", "0.33`", "0.84`", "0.45`"},
     {"0.5`", "0.9500000000000001`", "0.26`", "0.77`", "0.8`", "0.14`", 
      "0.66`"},
     {"0.19`", "0.18`", "0.72`", "0.86`", "0.74`", "0.67`", "0.91`"},
     {"0.32`", "0.21`", "0.13`", "0.98`", "0.56`", "0.9`", 
      "0.8200000000000001`"},
     {"0.7000000000000001`", "0.32`", "0.75`", "0.46`", "0.93`", "0.96`", 
      "0.35000000000000003`"},
     {"0.93`", "0.22`", "0.4`", "0.9500000000000001`", "0.36`", "0.53`", 
      "0.73`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.622224903113456*^9, 3.622224959348216*^9}}]
}, Open  ]],

Cell["Now specify the input pins :", "Text",
 CellChangeTimes->{{3.6222249862313013`*^9, 3.622224991565241*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"inputPins", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "6"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"amplitude", "=", "255"}], ";"}]}], "Input",
 CellChangeTimes->{{3.6222249694219723`*^9, 3.6222249834116707`*^9}, {
  3.622225245737507*^9, 3.622225250036457*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.622224980378859*^9, 3.6222252504747066`*^9}]
}, Open  ]],

Cell["\<\
and evaluate the VM, the result should be a 2D array again, that contains \
vectors of length 1 only:\
\>", "Text",
 CellChangeTimes->{{3.622224994950323*^9, 3.622224999807485*^9}, {
  3.622225202583794*^9, 3.622225228880887*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Round", "[", 
   RowBox[{
    RowBox[{"result", " ", "=", " ", 
     RowBox[{"vmClient", "@", 
      RowBox[{"evaluateArray", "[", 
       RowBox[{"data", ",", " ", "amplitude", ",", "inputPins"}], "]"}]}]}], 
    ",", "0.001"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.622225171901538*^9, 3.622225196773302*^9}, {
  3.62222523395092*^9, 3.622225330195805*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1.`"},
     {"1.`"},
     {"1.`"},
     {"0.459`"},
     {"0.871`"},
     {"1.`"},
     {"1.`"},
     {"1.`"},
     {"1.`"},
     {"1.`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.62222529393742*^9, 3.622225333007246*^9}}]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{1024, 768},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Linux x86 (64-bit) (February 7, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 104, 1, 44, "Subsection"],
Cell[686, 25, 332, 6, 31, "Text"],
Cell[1021, 33, 326, 6, 32, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[1384, 44, 211, 3, 44, "Subsection"],
Cell[1598, 49, 202, 4, 31, "Text"],
Cell[1803, 55, 1225, 28, 165, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[3065, 88, 103, 1, 44, "Subsection"],
Cell[3171, 91, 235, 6, 55, "Input"],
Cell[3409, 99, 262, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[3696, 108, 311, 6, 32, "Input"],
Cell[4010, 116, 424, 9, 32, "Output"]
}, Open  ]],
Cell[4449, 128, 335, 8, 53, "Text"],
Cell[CellGroupData[{
Cell[4809, 140, 211, 4, 32, "Input"],
Cell[5023, 146, 201, 3, 32, "Output"]
}, Open  ]],
Cell[5239, 152, 333, 6, 51, "Text"],
Cell[5575, 160, 383, 8, 32, "Input"],
Cell[5961, 170, 679, 10, 91, "Text"],
Cell[CellGroupData[{
Cell[6665, 184, 451, 13, 32, "Input"],
Cell[7119, 199, 1470, 33, 186, "Output"]
}, Open  ]],
Cell[8604, 235, 112, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[8741, 240, 312, 7, 55, "Input"],
Cell[9056, 249, 192, 4, 32, "Output"]
}, Open  ]],
Cell[9263, 256, 240, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[9528, 265, 421, 10, 32, "Input"],
Cell[9952, 277, 762, 26, 186, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
