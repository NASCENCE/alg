(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



prependFitness[g_,fitFn_]:={fitFn[g],g}


newRandomPop[size_,n_,dist_,fitFn_]:=prependFitness[#,fitFn]&/@Table[RandomReal[dist],{size},{n}]


newRandomPopParallel[size_,n_,dist_,fitFn_]:=ParallelMap[prependFitness[#,fitFn]&,Table[RandomReal[dist],{size},{n}]]


conditionalPermutation[data_,pick_]:=ReplacePart[data,MapThread[Rule,{Flatten@Position[pick,True],RandomSample[Pick[data,pick]]}]];


sel[s_,g_]:=MapThread[{#2,#3}[[#1]]&,Prepend[g,s]]


uniformXover[g_]:=Module[{k,i},
i=NestList[3-#&,Table[RandomInteger[{1,2}],{Length[g[[1]]]}],1];
Map[sel[#,g]&,i]
]


cauchyPerturbation[x_]:=x+RandomReal[CauchyDistribution[0,0.3]]


cauchyMutate[g_,mprob_]:=MapAt[cauchyPerturbation,g,Position[Sign[RandomReal[{0,1},{Length[g]}]-mprob],-1]]


xoverIndividuals[indiv_,fitnessFn_,mprob_]:=Module[{g=indiv[[All,2]],res},
prependFitness[#,fitnessFn]&/@(cauchyMutate[#,mprob]&/@uniformXover[g])
]


evolutionStep[pop_,fitFn_,OptionsPattern[{mutate->0.5,minimize->False,permuteAll->False,verbose->False,elite->0}]]:=Module[{fp=Sort[pop],p2,fmin,fmax,g2,t,r,res,perm,n=Length[Last@First@pop],fit,tbl,mprob=OptionValue[mutate],el,newIndiv2,newFit2},
(*Reverse if maximizing*)
If[\[Not]OptionValue[minimize],fp=Reverse@fp];
(*store elite*)
el=fp[[1;;OptionValue[elite]]];
(*take the top quarter and mutate it twice to get one half size of new individuals*)
p2=mapFn[prependFitness[#,fitFn]&,(cauchyMutate[#,mprob]&/@Join[fp[[1;;Length[fp]/4]],fp[[1;;Length[fp]/4]]][[All,2]])];
(*take the original genomes and their fitness separately*)
g2=fp[[All,2]];fit=First/@fp;
(*compute the poermutations probabilities*)
t=ParallelTable[Power[Rescale[fit[[i]],#@@(First/@fp)&/@{Min,Max}],1/n],{i,Length[pop]}];
(*for maximizing, 1 - probabilities, such that bests are les permuted*)
If[\[Not]OptionValue[minimize],t=1-t];
(*generate random binary numbers*)
r=RandomReal[{0,1},{Length[pop]}];
(*generate permutation pattern, for elitism, use 0 in the beg.*)
If[OptionValue[permuteAll],perm=ParallelTable[True,{Length[pop]}],perm=Sign[t-r]/.{-1->False,1->True}];
(*permutate the old ones, join the new ones, sort*)
newIndiv2=Transpose[ParallelMap[conditionalPermutation[#1,perm]&,g2\[Transpose]]];
res=Sort@Join[el,mapFn[prependFitness[#,fitFn]&,newIndiv2],p2];
(*reverse if maximizing*)
If[\[Not]OptionValue[minimize],res=Reverse@res];
(*cut off the worst*)
If[OptionValue[verbose],PrintTemporary[Round[#,0.001]&/@res[[1;;Length[pop],1]]]];
res[[1;;Length[pop]]]
]


coSyNEstep[pop_,fitFn_,opts:OptionsPattern[{mutate->0.5,minimize->False,permuteAll->False,verbose->False,elite->0}]]:=Block[{mapFn=Map},evolutionStep[pop,fitFn,opts]]


coSyNEstepParallel[pop_,fitFn_,opts:OptionsPattern[{mutate->0.5,minimize->False,permuteAll->False,verbose->False,elite->0}]]:=Block[{mapFn=ParallelMap},evolutionStep[pop,fitFn,opts]]


prioritizedParallelMap[fn_,x_]:=With[{ord=Reverse[Ordering[rankFn/@x]]},ParallelMap[fn,x[[ord]]][[ord]]]


coSyNEstepPrioritizedParallel[pop_,fitFn_,rankingFn_,opts:OptionsPattern[{mutate->0.5,minimize->False,permuteAll->False,verbose->False,elite->0}]]:=Block[{mapFn=prioritizedParallelMap,rankFn=rankingFn},evolutionStep[pop,fitFn,opts]]



